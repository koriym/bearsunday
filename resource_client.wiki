#summary リソースクライント

== 導入 ==

BEAR.Sundayの各種リソースをリクエストすることができるのがリソースクライントです。リクエストメソッド、URI、引き数等を指定してリソースリクエストを組み立ててリソースにリクエストをします。

== 準備 ==
利用クラスはリソースクライアントのsetterメソッドを用意します。traitを使うと便利です。

{{{
use BEAR\Framework\Inject\ResourceInject;

class Edit extends Page
{
    use ResourceInject;
}}}

これで`resource`プロパティにリソースクライアントがセットされます。

== リクエストDSL ==

{{{
$this
->resource
->get
->uri('app://self/blog/posts')
->withQuery(['id' => 1])
->eager
->request();
}}}

この例では *`app://self/blog/posts`* リソースに?id=1というリクエストを行います。

=== リクエストメソッド ===

get, put, post, deleteの4つです。

=== リクエストURI ===
BEAR.SundayのリソースはwwwのURIと同様な形式を持ちます。

{{{
{スキーマ}://{アプリケーション}/{パス}
}}}
スキーマがリソースの種類を表し、アプリケーションは通常自己を表すselfを指定します。BEAR.Sundayではページコントローラーもページリソースとして扱われます。その場合のスキーマは`page`です。モデルにあたるアプリケーションリソースのスキーマは`app`です。

トップページは以下の表記になります。(自己selfのアプリケーションの`/index`パスのpageリソースです。)
{{{
page://self/index
}}}

sandboxアプリケーションのブログ記事アプリケーションリソースは以下の表
記です。
{{{
app://self/blog/posts
}}}

page/appスキーマは以下のクラス、ファイルに対応します。

|| URI || Class || File ||
|| page://self/index || sandbox\Resource\Page\Index ||sandbox/Resource/Page/Index.php ||
|| app://self/blog/posts || sandbox\Resource\App\Blog\Posts.php || sandbox/Resource/App/Blog/Posts.php ||

オリジナルのスキーマをリソースアダプターとしてアプリケーションサイドで実装することが可能です。例えば既存の"office"サービスが何らかのシステムとして現在動作してるとします。officeスキーマをつくり、そのレガシーサービスをラップするアダプターをつくり、`office://{サービスパス}`等とします。既存のフレームワークのモデルを利用したい場合なども直接オブジェクトを扱うより新しいスキーマを作り、リソースアダプターを利用した方が良い場合が多いでしょう。

=== リクエストクエリー ===

リクエストクエリーでは名前付き引数で引数を渡します。これはPHPの通常の順序による引数ではなく、変数名を指定する名前付き引数です。

['id' => 1]とクエリーを指定は以下の(app/page)リソースのメソッドに対応します。変数名を指定するので順序は無関係です。

{{{
public function onGet($id)
{
}
}}}


リクエストオブジェクトはリクエストに必要な知識をもったオブジェクトです。テンプレートにアサインし、遅延評価することもできます。

== リクエストタイミング ==

リソースのリクエストはlazyとeagerがありリクエストのタイミングに違いがあります。eagerリクエストはすぐにリソースリクエストが行われるのに対して、lazyではviewテンプレートで出現した時に行われます。

===lazyリクエスト===
{{{
$this['posts'] = $this->resource->get->uri('app://self/posts')->request();
}}}

===eagerリクエスト===
{{{
$this['posts'] = $this->resource->get->uri('app://self/posts')->eager->request();
}}}

== テンプレートでの表記== 

|| 文字列 || {$posts} || 結果がテンプレートエンジンでレンダリングされた文字列 || 
|| 配列 || {$posts['id']} || 結果の連想配列アクセス ||
|| オブジェクト || {$posts->header} || 結果のオブジェクトアクセス ||

※eagerでもlazyでもテンプレートの表記に違いはありません。