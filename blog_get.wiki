#summary blogチュートリアル(3) appリソースの作成
#sidebar TableOfBlogTutorial
=appリソース=

== appリソースクラス ==

アプリケーションリソースはいわばアプリケーションの*内部API* です。MVCでいうとモデルに当たります。内部にデータベースアクセスやビジネスロジックを持ちページコントローラーの役割を持つページリソースに対してアプリケーション内部のAPIを提供します。

appリソースではGETリクエストに対応するonGetメソッドを実装したpostsリソースを作成します。空のリソースクラスは以下のようなものになります。

{{{
<?php
namespace sandbox\Resource\App;

/**
 * Posts
 *
 */
class Posts extends ResourceObject
{
    /**
     * Get
     */
    public function onGet($id = null)
    {
        $this->body = _DBから読み出したデータ_
        return $this;
    }
}
}}}

リクエストに応じたメソッド（リクエストインターフェイス）内ではデータをbodyプロパティにセットして$thisを返します。(データを直接返すこともできますが受け取る方にreturn $this;と同じものが返ります。)

== スタブリソース ==

onGetメソッドを記述するまえに、ダミーのデータでリソースを利用してみます。スタブデータ（ダミーデータ）を使ったリソースはアプリケーションのプロトタイピングやテスト等に使います。sansboxアプリケーションは専用の`stabモード`を持っていてこのモードにするためにはアプリケーションオブジェトを作成するときに引き数として指定します。

`apps/sandbox/htdocs/api.php` または `apps/sandbox/htdocs/web.php`

{{{
$runMode = App::RUN_MODE_STAB;
$useCache = false; 
$app = App::factory($runMode, $useCache);
}}}

スタブデータを用意します。

`apps/sandbox/stab/resource.php`
{{{
return [
    'sandbox\Resource\App\Posts' =>
        [
            [
                'id' => 0,
                'title' => 'Alan Kay 1',
                'body' => 'People who are really serious about software should make their own hardware.',
                'created' => '2011-05-07 16:13:11'
            ],
            [
                'id' => 1,
                'title' => 'Alan Kay 2',
                'body' => 'Perspective is worth 80 IQ points.',
                'created' => '2011-05-07 16:13:22'
            ],
            [
                'id' => 2,
                'title' => 'Alan Kay 3',
                'body' => 'The best way to predict the future is to invent it.',
                'created' => '2011-05-07 16:13:33'
            ]
         ]
];
}}}

作成したappリソースをコンソールで確認します。

{{{
$ php apps/sandbox/htdocs/api.php get app://self/posts
200 OK
[BODY]
0:array (
  'id' => 0,
  'title' => 'Alan Kay 1',
  'body' => 'People who are really serious about software should make their own hardware.',
  'created' => '2011-05-07 16:13:11',
)
1:array (
  'id' => 1,
  'title' => 'Alan Kay 2',
  'body' => 'Perspective is worth 80 IQ points.',
  'created' => '2011-05-07 16:13:22',
)
2:array (
  'id' => 2,
  'title' => 'Alan Kay 3',
  'body' => 'The best way to predict the future is to invent it.',
  'created' => '2011-05-07 16:13:33',
)
}}}

== リクエスインターフェイス実装 ==

GETリクエストに対するonGetメソッドを実装します。

BEAR.SundayではどのようにDBを使うかに既定はありません。このappリソースクラス内でSQLを直接利用したりORMを使用したりします。sadboxアプリケーションではDocrine DBALを使用してSQLを記述します。


_sandbox/Resource/App/Posts.php_
{{{
<?php
namespace sandbox\Resource\App;

use BEAR\Framework\Annotation\Db;
use BEAR\Framework\Interceptor\DbSetter;
use BEAR\Framework\Annotation\Time;
use BEAR\Resource\AbstractObject as ResourceObject;
use Doctrine\DBAL\Connection;
use PDO;

/**
 * Posts
 *
 * @Db
 */
class Posts extends ResourceObject implements DbSetter
{
    /**
     * Table
     *
     * @var string
     */
    private $table = 'posts';

    /**
     * DB
     *
     * @var Doctrine\DBAL\Connection
     */
    private $db;

    /**
     * Set DB
     *
     * @param Connection $db
     *
     * @return void
     */
    public function setDb(Connection $db = null)
    {
        $this->db = $db;
    }

    /**
     * Get
     *
     * @return array
     */
    public function onGet($id = null)
    {
        $sql = "SELECT id, title, body, created, modified FROM {$this->table}";
        if (is_null($id)) {
            $stmt = $this->db->query($sql);
            $this->body = $stmt->fetchAll(PDO::FETCH_ASSOC);
        } else {
            $sql .= " WHERE id = :id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindValue('id', $id);
            $stmt->execute();
            $this->body = $stmt->fetch(PDO::FETCH_ASSOC);
        }
        return $this;
    }
}
}}}

$idが指定されると記事１つが、指定されないと記事全てを返すPostsリソースです。このように、リソースクラスではリソースリクエストメソッドに応じたメソッドを記述します。

== コマンドラインからリソースの利用 ==

_sandbox/Resource/App/Posts.php_ に設置した`sandbox/Resource/App/Posts`クラスのこのappリソースは`app://self/posts`というURIが与えられます。

stabリソースでみたように作成したリソースは、コマンドラインからも直接呼び出せます。このリソースを利用してみましょう。

{{{
$ php apps/sandbox/htdocs/api.php get app://self/posts

200 OK
[BODY]
array (
  0 => 
  array (
    'id' => '1',
    'title' => 'タイトル',
    'body' => 'これは、記事の本文です。',
    'created' => '2011-07-01 22:30:25',
    'modified' => NULL,
  ),
  1 => 
  array (
    'id' => '2',
    'title' => 'またタイトル',
    'body' => 'そこに本文が続きます。',
    'created' => '2011-07-01 22:30:25',
    'modified' => NULL,
  ),
  2 => 
  array (
    'id' => '3',
    'title' => 'タイトルの逆襲',
    'body' => 'こりゃ本当に面白そう！うそ。',
    'created' => '2011-07-01 22:30:27',
    'modified' => NULL,
  ),
)
}}}

    Note: `self`は自己のアプリケーションのリソースという意味です。BEAR.Sundayでは他のアプリケーションのリソースをリクエストする事や、アプリケーションを横断して利用するリソースを設置することが可能です。

引き数はクエリーの形式で指定します。

{{{
$ php apps/sandbox/htdocs/api.php get app://self/posts?id=100
}}}

== aliasの設定 ==

シェルスクリプトでaliasをフルパスで設定しておくと便利です。

_~/.bash_profile_
{{{
alias blog='php /path/to/apps/sandbox/htdocs/dev.api.php'
alias blogweb='php /path/to/apps/sandbox/htdocs/dev.web.php'
}}}

上段がリソースのAPI利用、下段はwebリクエストに対応します。簡単な表記になりました。どのディレクトリからもコンソールでリソースを利用できるようになりました。バッチ処理などのOSからのスクリプト利用にも便利です。

{{{
// APIアクセス
$ blog get app://self/posts

// webアクセス
$ blogweb get /posts
}}}

== API駆動開発==

このようにBEAR.Sundayでは内部API(appリソース)開発をベースにwebアプリケーションを構築します。リソースはサービスレイヤーとして機能し、データソースやビジネスロジックを含んだ処理のまとまりにRESTfulな限定された統一とインターフェイスとURIとして名前を与えます。

webアプリケーションを元に外部API用インターフェイスを作成提供するのでなく、内部リソースAPIをベースにアプリケーションをAPIの集合のように構築します。

== ランタイムインジェクション ==

このappリソースはGETリクエストされる度、直前にsetDb()が呼ばれDBオブジェクが外部から代入（インジェクト）されます。このクラスにはどのDBオブジェクトを利用するかという指定はなく、外部からの代入にその選定を任せている事に注目してください。Getリクエストではスレーブ用DBオブジェクトが、その他のPut,Post,Deleteリクエストではマスター用DBオブジェクトが代入されます。

この実行時（ランタイム）のオブジェクトのインジェクションをランタイムインジェクションと呼びます。これは特定のメソッド(この場合onGet)に、そのメソッドの実行前に呼び出されるインターセプター(この場合Dbオブジェクトインジェクター）がバインドされていることで実現されています。

このDbオブジェクトがランタイムでインジェクトされる仕組みはBEAR.Sundayで固定化された仕組みではなく、appModuleでインストールしたDotriDbalModuleの働きです。DotriDbalModuleでは`@Db`とアノテートされたクラスのメソッドにはDb接続オブジェクトをインジェクトするDbインジェクターをバインドしています。
