#summary blogチュートリアル(3) appリソースの作成
#sidebar TableOfBlogTutorial
=appリソース=

== appリソースクラス ==

アプリケーションリソースはいわばアプリケーションの内部APIです。MVCでいうとモデルに当たります。

内部にDAO/ORM等のデータベースアクセスやビジネスロジックを持ち、ページに対してAPIを提供します。また制限をかけ一部、または全部を外部APIとして公開できます。

リソース内ではリソースリクエストメソッドに応じたリソースリクエストインターフェイスを記述します。ここではgetリクエストに対応するonGetメソッドを実装したブログの記事リソースを作成します。


_sandbox/Resource/App/Posts.php_
{{{
<?php
namespace sandbox\Resource\App;

use BEAR\Resource\Object as ResourceObject;
use Doctrine\DBAL\Connection;
use PDO;

/**
 * @Db
 */
class Posts extends ResourceObject
{
    /** @var string */
    private $table = 'posts';

    /** @var Connection */
    private $connection;

    /**
     * Set DB
     * 
     * @return void
     */
    public function setDb(Connection $connection)
    {
        $this->connection = $connection;
    }

    /**
     * Get
     * 
     * @return array
     */
    public function onGet()
    {
        $sql = "SELECT * FROM {$this->table}";
        $stmt = $this->connection->query($sql);
        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
        return $result;
    }
}
}}}

== コマンドラインからリソースの利用 ==

_sandbox/Resource/App/Posts.php_に設置した`sandbox/Resource/App/Posts`クラスのこのappリソースは`app://self/posts`というURIが与えられます。

作成したリソースはコマンドラインからも直接呼び出せます。
このリソースを利用してみましょう。

{{{
$ php apps/sandbox/htdocs/dev.api.php get app://self/posts
}}}

以下のようなレスポンスが返ってくるはずです。

{{{
200 OK
[BODY]
array (
  0 => 
  array (
    'id' => '1',
    'title' => 'タイトル',
    'body' => 'これは、記事の本文です。',
    'created' => '2011-07-01 22:30:25',
    'modified' => NULL,
  ),
  1 => 
  array (
    'id' => '2',
    'title' => 'またタイトル',
    'body' => 'そこに本文が続きます。',
    'created' => '2011-07-01 22:30:25',
    'modified' => NULL,
  ),
  2 => 
  array (
    'id' => '3',
    'title' => 'タイトルの逆襲',
    'body' => 'こりゃ本当に面白そう！うそ。',
    'created' => '2011-07-01 22:30:27',
    'modified' => NULL,
  ),
)
}}}

    Note: `self`と指定するのはBEAR.Sundayでは他のアプリケーションのリソースをリクエストする事や、アプリケーションを横断して利用するリソースを設置することが可能な為です。selfはhtdocs/が設置されてる自己のアプリケーションに対応します。

== aliasの設定 ==

シェルスクリプトでaliasをフルパスで設定しておくと便利です。

_~/.bash_profile_
{{{
alias blog='php /path/to/apps/sandbox/htdocs/dev.api.php'
}}}

簡単な表記になりました。どのディレクトリからもCLIでアプリケーションリソースを利用できます。

{{{
$ blog get app://self/posts
}}}

== API-driven application by API-driven development ==

このようにBEAR.Sundayでは内部API(appリソース)開発をベースにwebアプリケーションを構築します。リソースはサービスレイヤーとして機能し、データソースやビジネスロジックを含んだ処理のまとまりに、RESTの限定された統一とインターフェイスとURIとして名前を与えます。

webアプリケーションを元にAPI用インターフェイスを作成、提供するのでなく、API開発をベースにアプリケーションを構築します。

