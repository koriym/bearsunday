#summary blogチュートリアル(3) appリソースの作成
#sidebar TableOfBlogTutorial
=appリソース=

== appリソースクラス ==

アプリケーションリソースはいわばアプリケーションの*内部API* です。MVCでいうとモデルに当たります。

内部にDAO/ORM等のデータベースアクセスやビジネスロジックを持ち、ページに対してアプリケーション内部のAPIを提供します。

リソース内ではリソースリクエストメソッドに応じたリソースリクエストインターフェイスを記述します。ここではgetリクエストに対応するonGetメソッドを実装したブログの記事リソースを作成します。


_sandbox/Resource/App/Posts.php_
{{{
<?php
namespace sandbox\Resource\App;

use BEAR\Resource\Object as ResourceObject;
use Doctrine\DBAL\Connection;

/**
 * Posts
 *
 * @Db
 */
class Posts extends ResourceObject implements DbSetter
{
    /**
     * Table
     *
     * @var string
     */
    private $table = 'posts';

    /**
     * DB
     *
     * @var Doctrine\DBAL\Connection
     */
    private $db;

    /**
     * Set DB
     *
     * @param Connection $db
     *
     * @return void
     */
    public function setDb(Connection $db = null)
    {
        $this->db = $db;
    }

    /**
     * Get
     *
     * @return array
     */
    public function onGet()
    {
        $sql = "SELECT id, title, body, created, modified FROM {$this->table}";
        $stmt = $this->db->query($sql);
        $this->body = $stmt->fetchAll(PDO::FETCH_ASSOC);
        return $this;
    }

    /**
     * Post
     *
     * @param string   $title
     * @param string   $body
     * @param DateTime $created
     * @param DateTime $modified
     *
     * @return \sandbox\Resource\App\Posts
     */
    public function onPost($title, $body, $created = null, $modified = null)
    {
        $this->db->insert($this->table, ['title' => $title, 'body' => $body]);
        $this->code = 204;
        return $this;
    }
}
}}}

== コマンドラインからリソースの利用 ==

_sandbox/Resource/App/Posts.php_ に設置した`sandbox/Resource/App/Posts`クラスのこのappリソースは`app://self/posts`というURIが与えられます。

作成したリソースはコマンドラインからも直接呼び出せます。
このリソースを利用してみましょう。

{{{
$ php apps/sandbox/htdocs/dev.api.php get app://self/posts
}}}

以下のようなレスポンスが返ってくるはずです。

{{{
200 OK
[BODY]
array (
  0 => 
  array (
    'id' => '1',
    'title' => 'タイトル',
    'body' => 'これは、記事の本文です。',
    'created' => '2011-07-01 22:30:25',
    'modified' => NULL,
  ),
  1 => 
  array (
    'id' => '2',
    'title' => 'またタイトル',
    'body' => 'そこに本文が続きます。',
    'created' => '2011-07-01 22:30:25',
    'modified' => NULL,
  ),
  2 => 
  array (
    'id' => '3',
    'title' => 'タイトルの逆襲',
    'body' => 'こりゃ本当に面白そう！うそ。',
    'created' => '2011-07-01 22:30:27',
    'modified' => NULL,
  ),
)
}}}

    Note: `self`は自己のアプリケーションのリソースという意味です。BEAR.Sundayでは他のアプリケーションのリソースをリクエストする事や、アプリケーションを横断して利用するリソースを設置することが可能です。

== aliasの設定 ==

シェルスクリプトでaliasをフルパスで設定しておくと便利です。

_~/.bash_profile_
{{{
alias blog='php /path/to/apps/sandbox/htdocs/dev.api.php'
alias blogweb='php /path/to/apps/sandbox/htdocs/dev.web.php'
}}}

上段がリソースのAPI利用、下段はwebリクエストに対応します。簡単な表記になりました。どのディレクトリからもコンソールでリソースを利用できるようになりました。バッチ処理などのOSからのスクリプト利用にも便利です。

{{{
// APIアクセス
$ blog get app://self/posts

// webアクセス
$ blogweb get /posts
}}}

== API-driven application==

このようにBEAR.Sundayでは内部API(appリソース)開発をベースにwebアプリケーションを構築します。リソースはサービスレイヤーとして機能し、データソースやビジネスロジックを含んだ処理のまとまりにRESTfulな限定された統一とインターフェイスとURIとして名前を与えます。

webアプリケーションを元に外部API用インターフェイスを作成提供するのでなく、内部リソースAPIをベースにアプリケーションをAPIの集合のように構築します。

== ランタイムインジェクション ==

このappリソースは実行の直前にsetDb()が呼ばれDBオブジェクトがインジェクトされます。このようにオブジェクトのコンストラクションではなく、その後の実行（ランタイム）時にインジェクトをランタイムインジェクションと呼びます。

DBオブジェクトは副作用の無い読み込みのGETかそれ以外のリクエストメソッドかを区別して（master/slaveを想定して）選ばれます。選ばれたDBオブジェクトのセッターメソッドはリクエストの直前にコールされます。

このインジェクションはメソッドインボケーションインターセプターというメソッド実行前に処理を割り込ませる仕組みでです。メソッドにインターセプターがバインドされています。

バインドはモジュールで設定されます。ていてこのappリソースでは@Dbというアノテーションとインタセプターがバインドされています。