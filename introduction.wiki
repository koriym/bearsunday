#summary BEAR.Sundayについて
#labels Featured

= BEAR.Sunday, a resource oriented framework for PHP =

== Representational State Transfer ==

[http://ja.wikipedia.org/wiki/REST REST] (Representational State Transfer) は 2000年、HTTP 仕様バージョン 1.0 と 1.1 の中心的作成者の 1 人である Roy Fielding の博士論文で初めて紹介され定義されました。

リソースとは意味のある情報のかたまりです。リソースの状態から表現がつくられその表現がクライアントに渡ります。これがREST(Representational State Transfer=表現可能な状態の転送) です。例えば「在庫情報」はリソースです。その状態「あと１個」からHTMLページという表現がつくられWebブラウザに渡され在庫情報ページになります。これはRESTです。

Webサービスとして用いれるRESTのアーキテクチャをフレームワーク内部にも適用する試みが、このリソース指向のフレームワーク *BEAR.Sunday* です。

== Because Everything is A Resource. ==

Webページは内部ではページコントローラーの働きをしますが、外部からみればアプリケーションリソース（モデル）の集合でそれ自体がリソースです。アプリケーションリソースもまたそのサブアプリケーションリソースに対して同じ構成を持ちます。ビューがモデルをレンダリングするのでなく、それぞれのリソースがビューを持ち、自らの状態を表現にしてクライアントに渡されます。

モデルに限らずページコントローラーにもドメインレイヤーとしてRESTの特徴を与えられ、ページコントローラーもリソースの１つになります。BEAR.Sundayは全てをリソースとして扱おうとするリソース指向フレームワークです。

== オブジェクトフレームワーク ==

BEAR.Sundayは各々のモデルやソフトウエアコンポーネントがどういうものであるか、ということよりそれらをどう結ぶかという接続技術により注目します。独自のコンポーネントをなるべく持たずAura / Zend Framework 2/ Symfony等のコンポーネント指向のフレームワークや単体ライブラリを積極使用します。

フレームワークの機能をさまざまなアスペクトの集合とみなしてAOPをその解決に用いています。抽象依存を重視し粗結合でコンポーネントを接続するためにDIも使用しています。サービスレイヤーの`BEAR.Resource`を含めてこのオブジェクトフレームワークはBEAR.Sundayのコアです。機能を実装ではなくなるべく設計と組み合わせによって実現しようとしますが、そのファンデーションがこのオブジェクトフレームワークです。

== for whom ? ==

BEAR.Sundayでは二種類のユーザーを想定しています。

 * *アプリケーションアーキテクト* プロジェクトの構造（フレームワーク）をアプリケーションアーキテクチャとして構築します。必要なサービスやアスペクトを検討して、テンプレートエンジン等のライブラリの選定や既存のライブラリや情報システムの結合なども行います。つまりアーキテクトとはアプリケーションを構成、設計やそれに必要な実装をする人です。

 * *アプリケーションエンジニア* アプリケーションアーキテクチャのほぼ決定された状態でその実装を行います。DIの設定等を行う事は少なく、インジェクトされたサービスを使ってアプリケーションを実装します。アプリケーションの実装を行う人です。

実際にはこれらを混合して行う事も多いでしょうが、規模の大小や参加スタッフによってこの対象を意識するのは有用かと思います。

== for what ? ==

リソースは内部APIとして機能します。そのAPIをWebアプリプロジェクトのサブセットではなく、アプリケーションドメインの核心として扱います。Webサイトはそのアプリケーションの１つです。モバイルデバイス、SNSアプリ、あるいは他のフレームワークのモデルとしても機能します。

== 影響を受けたフレームワーク・ソフトウエア技術 ==

 * [http://code.google.com/p/google-guice/ Google Guice]
 * [http://aopalliance.sourceforge.net/AOP Alliance (Java/J2EE AOP standards)]
 * [http://auraphp.github.com/ Aura]
 * [http://jcp.org/en/jsr/detail?id=311 JSR311 Jax-RS],  [http://jersey.java.net/ Jersey]
 * [http://click.sourceforge.net/ Click Framework]
 * Zend Framework / Symfony / Flow3 / Ding / Guzzle / Doctrine / PEAR

== 開発途中です ==

 * BEAR.Sundayは開発途中です。
 * DI+AOPのオブジェクトフレームワーク部分、APIフレームワークとしての完成度はある程度高まってきました。
 * アスペクトやリソースに大きな変更はないという観測を持っています。
 * 開発参加、[https://groups.google.com/forum/?fromgroups#!forum/bear-project very welcome]です。一緒に夢をみましょう。