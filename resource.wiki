#summary リソース

= 導入 =

MVCフレームワークでコントローラーがモデルにアクセスするように、BEAR.Sundayではページリソースがアプリケーション(app)リソースにリクエストします。

モデルをオブジェクト設計されたものとして扱わず、RESTに従ったリソースとして扱います。リソースはレイヤーとしても機能し、内部のプロシージャやオブジェクトをラップし統一したリソースの扱いを可能にします。リソースクライアントはインスタンスを直接扱う事なく、URIで得られるリソースオブジェクトはリクエストインターフェイスを通じて操作されます。

オブジェクトモデル

|| *cart:* || show, addItem, remoteItem, addCoupon, remoteCoupon, increaseQuantity, decreaseQuantity ||

REST

|| *`cart`* || get, post, put, delete || 
|| *`cart/item`* || get, post, put, delete || 
|| *`cart/coupon`* || get, post, put, delete || 



== ROA（リソース指向アーキテクチャ) ==
BEARのリソースもHTTPアプリケーションと同じようにROA([http://en.wikipedia.org/wiki/Resource-oriented_architecture リソース指向設計]）の次の４つの特徴を持ちます。

 * アドレス可能性　(Addressability)
 * 統一インターフェイス (Unified Interface)
 * ステートレス (Statelessness)
 * リンク (Connectedness)

=== アドレス可能性 ===

リソースはWebのURLと同じようなURIを持ちます。

{{{
app://self/blog/posts/3
}}}

{{{
page://self/index
}}}

MVCでモデルにあたるものがアプリケーション(app)リソースです。BEAR.Sundayでは内部APIとして機能します。例えばブログの記事リソース、ユーザーリソースといった具合です。

BEAR.Sundayでは（ページ）コントローラーのページもリソースです。例えば
ブログの記事表示ページ、ユーザーページというページリソースです。

リソースは「それぞれの領域の関心」に注意を払います。記事表示 *page* リソースは自らを構成するために「記事 *app* リソース」をコンテンツとして自身のbodyプロパティにセットします。ここでページ記事の詳細については関心を払いません。appリソースにリクエストした結果を自身の一部にするのがページの役割です。、

`app`, `page`等それぞれの領域（情報体系）を表すスキーマは`http`等用意されてるものの他にも、ユーザーが登録可能です。

例えば特定システムのスキーマを用意して、`office://self/room/meething/reservation/3`や`twitter://self/mytweet/recent/30`等と旧来のオブジェクトベースのモデルにURIを与えることができます。

`self`は「自身のサービス」を表します。他のサービスのリソースを利用可能にするための識別です。

独自のスキーマや別のサービスにリクエストをするための詳細は[resource_scheme リソーススキーマ]をご覧ください。

=== 統一インターフェイス ===

リソースの状態（データ）はインターフェイスを通じて操作することができます。その操作を行うのがリソースクライアントです。

Web(HTTPアプリケーション)で考えてみましょう。リソースはHTTPクライアント（webブラウザ等）でリクエストすることができますが、そのメソッドはGET/PUT/POST...等と限定されています。リソースに応じてそのメソッドが変わる事がありません。

BEAR.SundayのリソースもHTTPのメソッドに準じた４つのインターフェイスを持ちます。

|| GET || リソースの取得 ||
|| PUT || リソースの変更または作成 ||
|| POST || リソースの作成 ||
|| DELETE || リソースの削除 ||
|| OPTIONS || リソースアクセス方法の調査 ||

==== GET ====
リソースの読み出しです。このメソッドはリソースの状態には何の変化も与えません。副作用のない安全なメソッドです。

==== PUT ====
リソースの変更、または作成を行います。このメソッドはリクエストを1度行っても、複数回行っても変わらないことです。例えば「ユーザー名を変更する」というのは`PUT app://self/user?name=bear`等と表されます。

==== POST ====
リソースの作成を行います。これは最も取り扱い注意なメソッドで、リクエストを複数回行うとその回数に応じてリソースが作成されてしまいます。

==== DELETE ====
リソースの消去です。PUTとおなじくべき等性があります。

==== OPTIONS ====
リソースが利用可能なメソッドとパラメーターを調査します。`GET`と同じくリソースには影響を与えません。

== ステートレス ==

これはリソースのリクエストにステート（状態）がないという事です。

例えば以下のようなオブジェクトモデルに対するアクセスはリクエストに状態があります。

{{{
$user = new User;
$user->setUserId($id); 
$name = $user->getName(); // $idがセットされてる状態を前提にしている
}}}

リソースリクエストには状態がありません。
{{{
$name = $resource
  ->get
  ->uri('app://self/user')
  ->eager
  ->request(['id' => 1)
  ->body['name'];
}}}


== リンク ==

リソースは他のリソースとリンクすることができます。例えばユーザーリソースは*ブログリンク*よってブログリソースにリンクされます。ブログリソースは*最新記事リンク*や*人気記事リンク*で記事リソースにリンクされます。

リンクはリソース内部でカプセル化され、外部からはリソースからはリンクをたどるだけです。htmlのaタグのイメージです。hrefで指定されたリンク情報はクライアントは管理しません。利用するだけです。もしリンク先リンク方法が変わったとしても利用の仕方は変わりません。

DBのリレーションやアソシエーション機能とは独立していうるので例えばDBデーターの特定カラムが、WebAPIを利用するhttpリソースにリンクしたりなどスキーマを超えて情報（リソース）をリンクすることができます。

= RESTとBEAR.Sunday =

^REST自身は、多くの異なる技術を利用して実装されうる高水準なスタイルなのです。RESTは、リソースや統一インターフェースの考えを持っています。つまり、全てのリソースが同じメソッドによって応答するという考えなのです。しかし、RESTはどのメソッドでなければならないのかや、メソッドの数がどれくらい必要であるのかといったことには言及していません。REST スタイルを「具現化」したものの1つが、HTTP(と、URIなどの関連する標準セット)です。もしくは、少し抽象的になりますが、Webのアーキテクチャそれ自身であるとも言えます。HTTPは、RESTの統一インターフェースをHTTPの動詞(操作)からなる特別な形で「具体化」したものと言えます。^
,,作者 Stefan Tilkov, 翻訳者 松本 清一 http://www.infoq.com/jp/articles/rest-introduction,,

BEAR.Sundayの核心はこのRESTです。情報／処理のまとまりをリソースとしてとらえHTTPやwebのアーキテクチャのように振る舞います。APIまたはWebフレームワークとしてのBEAR.Sundayはこれらのリソースの集合として構成されます。


== リンク ==

    * [http://ja.wikipedia.org/wiki/REST REST(Wikipedia)]
    * [http://www.infoq.com/jp/articles/rest-introduction infoQREST入門]
    * [http://yohei-y.blogspot.com/2005/04/rest_23.html REST入門]
    * [http://text.art-code.org/presen/restfulreading/ REST & ROA Best Practice]