#summary はじめてのリソースリクエスト

== アプリケーションリソースを利用します ==

いままでコマンドラインやwebブラウザから直接アプリケーションリソースやページリソースをリクエストしていましたが、このセクションではリソースからリソースのリクエストを行います。つまりCLI/Webではなくて、PHPからリソースをリクエストを行います。

[my_first_web_page はじめてのwebページ]で作成したページを[my_first_resource はじめてのリソース]を利用したものに変更します。

 Note: 例えていうとコントローラーが"Hello World"を返してたページが、モデルが返した"Hello World"を表示するページに変更します。

== リソースクライアントの準備 ==

BEAR.Sundaydでは必要なオブジェクトは基本的に全て外部からインジェクトしてもらうのを期待します。リソースリクエストにはリソースクライアントが必要です。

リソースクライアントインターフェイス（BEAR\Resource\ResourceInterface）をタイプヒントにして@Injectとアノテーションでマークするとインジェクト（外部から代入）してもらいます。

{{{
use BEAR\Resource\ResourceInterface;
use Ray\Di\Di\Inject;
}}}
{{{
class User
{
    /**
     * @Inject
     */
    public function setResource(ResourceInterface $resource)
    {
        $this->resource = $resource;
    }
}}}

== traitセッターの利用 ==
このセッターはtraitとして用意されていてこのように表記できます。
{{{
use BEAR\Framework\Inject\ResourceInject;

class User
{
    use ResourceInject;
}
}}}

== GETリクエスト ==

`app://self/first/greeting`に?name=$nameのリソースリクエストを行うのはこのようなメソッドになります。

{{{
    /**
     * Get
     *
     * @param  string $name
     */
    public function onGet($name = 'anonymous')
    {
        $this['greeting'] = $this->resource
        ->get
        ->uri('app://self/first/greeting')
        ->withQuery(['name' => $name])
        ->request();
        
        return $this;
    }
}}}

==`$_GET`クエリー ==

`$_GET['name']`の内容が引き数の`$name`に渡ります。`$_GET['name']`が存在しない場合はデフォルトの'anonymous'が渡されます。

== コマンドラインでページを確認 ==

'greeting'スロットには`'app://self/first/greeting'`リソースのリクエストが格納されました。

== APIとして確認 ==

まずAPIとしてページリソースを確認します。

{{{
$ php api.php get 'page://self/first/greeting?name=BEAR'
}}}
{{{
200 OK
cache-control: no-cache
date: Fri, 13 Jul 2012 13:47:28 GMT
content-type: text/html; charset=UTF-8
[BODY]
greeting:Hello, BEAR
}}}

`greeting`スロットに'Hello, BEAR'が渡されてます。クエリーを無くすとどうなるでしょうか。

{{{
$ php api.php get 'page://self/first/greeting'
}}}
{{{
greeting:Hello, anonymous
}}}
ちゃんとデフォルト値が入っています。

== ページテンプレートを用意 ==

ページリソース用のテンプレートは同じです。
{{{
<!DOCTYPE html>
<html lang="en">
  <body>
      <h1>{$greeting}</h1>
  </body>
</html>
}}}

== HTMLをコマンドラインで確認 ==

{{{
$ php web.php get '/first/greeting?name=Sunday'
}}}
{{{
200 OK
x-interceptors: {"onGet":["BEAR\\Framework\\Interceptor\\Logger"]}
x-query: {"name":"Sunday"}
x-params: ["Sunday"]
x-args: ["Sunday"]
x-execution-time: 0.056586027145386
x-memory-usage: 268248
x-profile-id: 500027d0d9f08
cache-control: no-cache
date: Fri, 13 Jul 2012 13:51:12 GMT
content-type: text/html; charset=UTF-8
[BODY]
<!DOCTYPE html>
<html lang="en">
  <body>
      <h1>Hello, Sunday</h1>
  </body>
</html>
}}}

== ページのテスト ==
ページもリソースです。テストの仕方は[my_first_test はじめてのテスト]で紹介をしたようにページリソースをテストします。