#summary リソースレンダラー
= 導入 =

リソースは状態から表現に変わります。たとえばユーザーページはユーザーに関する情報を変数として保持していますが、クライアントにはHTMLとして伝わります。

この状態から表現に変えるのがリソースレンダラーです。レンダラーはリソースが文字列として評価されたときにレンダリングを行います。多くの場合、レンダラーにインジェクトされたテンプレートエンジンがレンダリングします。

== レンダラーのインジェクト ==

リソース状態（リソースの値）を表現にするのはリソース内部のリソースレンダラーの責任です。リソースの利用者ではありません。MVCでいうと、モデル内部にそのモデルをどう表現するかというレンダラーが内蔵されているイメージです。

レンダラーはDependency Injectorによってインジェクトされます。DIの設定を行うアプリケーションモジュールでこのレンダラーを別のレンダラーにする事ができます。例えば開発中は開発情報が付加表示されるDevRenderer?がインジェクトされています。Web API用には例えばJSONをレンダリングする`JsonRenderer`をインジェクトします。 

開発用のDevModuleではリソースレンダラーインターフェイスに開発用`DevRenderer`をバインドしています。このバインドを変える事で全てのリソースをWeb API用にJSON出力したりすることができます。
{{{
$this->bind('BEAR\Resource\Renderable')->to('BEAR\Framework\Resource\View\DevRenderer');
}}}

== レンダリング ==
レンダラーはリソース状態を`ResourceObject`として受け取り、インジェクトしたテンプレートエンジン等を使って文字列にします。

{{{
public function render(ResourceObject $ro)
{
 ....
 return $ro->body;
}
}}}

 Note: リソースオブジェクトはリソースリクエストメソッドの中でテンプレートを直接指定しないようにします。間接的にリソースに状態を持たせて（たとえばLogin NG)、レンダラー、あるいはビューテンプレートがそれを判定してテンプレートを変えます。モデルがビューに感知しないように、リソースがリソースレンダリングの詳細を知らないようにすることが肝心です。