#summary blogチュートリアル(7) バリデーション
#sidebar TableOfBlogTutorial

前回のセクションで記事追加ページにPOSTインターフェイスが実装され、記事の追加をHTTPメソッドで受ける事ができるようになりました。

次はできあがったPOSTインターフェイスに、バリデーション、フィルター、エラー再入力時のデフォルト値設定などのwebフォームとして機能を加えましょう。

 Note: このチュートリアルでは特別な専用ライブラリを使用しないでプレーンなPHPでコーディングしています。実際にはZend FrameworkやSymfony、あるいはその他のバリデーションライブラリやフォームライブラリーを利用するのがいいでしょう。

== @Formバリデーション ==

特定のライブラリに依存しないフォームをインターセプターとして実装してみます。まずは`@Form`アノテーションとフォームバリデーションインターセプターののバインディングです。

アノテーション sandbox\Annotation\Form

{{{
namespace sandbox\Annotation;

/**
 * Form
 *
 * @Annotation
 * @Target({"METHOD"})
 */
final class Form
{
}
}}}

インターセプターのバインディング
{{{
    /**
     * @Form - bind form validater
     */
    private function installFormValidater()
    {
        $this->bindInterceptor(
            $this->matcher->subclassesOf('sandbox\Resource\Page\Blog\Posts\Newpost'),
       	    $this->matcher->annotatedWith('sandbox\Annotation\Form'),
            [new PostsFormValidater]
        );
    }
}}}

これで@Formとアノテートされているメソッドに`PostsFormValidater`がバインドされました。リクエストがPOSTメソッドをコールする前にこのバリデートインターセプターが呼ばれます。

== @Formインターセプター ==
リクエストとメソッドに割り込んだインターセプターでは、タグを取り除くフィルター処理の後にバリデーションをしています。バリデーションが通れば元のPOSTメソッドを呼びます。
{{{
return $invocation->proceed();
}}}
バリデーションNGならエラーメッセージや初期値などをセットし*加工したGETリクエストのページ* を出力します。POSTインターフェイスメソッドは呼ばれません。

{{{
return $page->onGet();
}}}

すべてをまとめた`PostsFormValidater`はこのようになります
{{{
/**
 * Log Interceptor
 */
class PostsFormValidater implements MethodInterceptor
{
	const TITLE = 0;
	const BODY = 1;
	
	/**
	 * Error
	 * 
	 * @var array
	 */
	private $errors = [
		'title' => '',
		'body' => ''
	];
	
    /**
     * (non-PHPdoc)
     * @see Ray\Aop.MethodInterceptor::invoke()
     */
    public function invoke(MethodInvocation $invocation)
    {
        // retrieve page and query
    	$args = $invocation->getArguments();
    	$page = $invocation->getThis();
    	
    	// strip tags
    	foreach ($args as &$arg) {
    		$arg = strip_tags($arg);
    	}
    	
    	// required title
    	if ($args[self::TITLE] === '') {
    		$this->errors['title'] = 'title required.';
    	}
    	
    	// required body
    	if ($args[self::BODY] === '') {
    		$this->errors['body'] = 'body required.';
    		$hasError = true;
    	}
    	
    	// valid form ?
    	if (implode('', $this->errors) === '') {
	    	return $invocation->proceed();
    	}
    	
        // error, modify 'GET' page with error message.
    	$page['errors'] = $this->errors;
    	$page['submit'] =[
    		'title' => $args[self::TITLE],
    		'body' => $args[self::BODY]
    	];
    	return $page->onGet();
    }
}
}}}

`MethodInvocation`型の`$invocation`はメソッドの呼び出しオブジェクトです。

`$invocation->getArguments()`で引数が、`$invocation->getThis();`で呼び出し元の記事表示ページリソースオブジェクトが得られています。

 Note: 引数は名前付き引数でなく、メソッドコールの時と同じ様に順番で指定され渡ります。

}}}