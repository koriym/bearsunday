#summary Hello World

= Hello World =

最小構成アプリを見る事でBEAR.Sundayアプリの構成を学習します。
このアプリケーションは主に３つのファイルで構成されています。

 * web/cli用フロントスクリプト min.php
 * Helloページリソース Hello.php
 * アプリケーション生成スクリプト instance.php

フロントスクリプトでアプリケーションを生成しHelloページにリクエストを行い結果を表示します。

CLIでHello World。

{{{
$ php /path/to/BEAR.Sunday/apps/helloworld/htdocs/min.php
}}}

PHP5.4 built-in web serverでHello World。

{{{
$ php -S localhost:8081 /path/to/BEAR.Sunday/apps/helloworld/htdocs/min.php
}}}

= リソース用最小構成　=

=== web/cli用スクリプト (apps/helloworld/htdocs/min.php) ===
 
{{{
// application
$app = require dirname(__DIR__) . '/scripts/instance.php';
$response = $app->resource->get->uri('page://self/hello')->withQuery(['name' => 'World !'])->eager->request();

// output
foreach ($response->headers as $header) {
    header($header);
}
echo $response->body;
exit(0);

}}}

== 説明 ==

{{{
$app = require dirname(__DIR__) . '/scripts/instance.php';
}}}
アプリケーションのインスタンスをスクリプトで取得します。

{{{
$response = $app->resource->get->uri('page://self/hello')->withQuery(['name' => 'World !'])->eager->request();
}}}
アプリケーションがプロパティにもつリソースクライアントで`page://self/hello`というURIを持つリソース`get`メソッドでアクセスしています。クエリー（引き数）を指定し`earger->requesst()`ですぐに値を取得しています。

{{{
foreach ($response->headers as $header) {
    header($header);
}
echo $response->body;
}}}
値はHTTPレスポンスと同じようにcode, headers, bodyという３つのプロパティを持っています。

== Helloページリソース ==
BEAR.Sundayは1 Page = 1 Classのページコントローラーが基本です。クエリーを引数と受けてその結果を自身として構成します。

*helloworld/Resource/Page/Hello.php*

{{{
class Hello extends Page
{
    /**
     * @return self
     */
    public function onGet($name)
    {
        $this->body = 'Hello ' . $name;
        return $this;
    }
}
}}}

ページリソースはMVCで言えばコントローラーあたる部分ですが、テンプレートに値をセットするのではなく` $this->body = 'Hello ' . $name;`として自らをページオブジェクトとして構成して$thisを返しています。

これは以下の様にも記述できます。
{{{
    {
        $body = 'Hello ' . $name;
        return $body;
    }
}}}

== アプリケーションクラス ==
*helloworld/App.php*

アプリケーションクラスでは実行モードに応じてアプリケーションモジュールを選択し、アプリケーションオブジェクトを作成し返すfactory()メソッドを実装します。

== アプリケーションモジュール ==
*helloworld/Module/`*`.php*

アプリケーションモジュールはアプリケーションが必要とする依存と実装のバインディングの集合です。アノテートされたインターフェイス等インジェクトが期待される"インジェクションポイント"に対し、実装を設定することでアプリケーションを構成、機能追加します。