#summary リソースアダプター
= 導入 =

リソースの`URI`のスキーマは特定のリソースアダプターとバインドされ、そのリクエストを行います。

== バインディングDSL ==

{{{
$schemeCollection = new SchemeCollection;
$schemeCollection->scheme('app')->host('self')->toAdapter($appAdapter);
$schemeCollection->scheme('page')->host('self')->toAdapter($pageAdapter);
$schemeCollection->scheme('page')->host('*')->toAdapter($httpAdapter);
$this->bind('BEAR\Resource\SchemeCollection')->toInstance($schemeCollection);
}}}

上記のバインディングで、`app://self/`、`page://self/`および、`http://`で始まるリソースが扱える様になります。実際にリクエストを処理するのはリソースアダプター（`$appAdapter`等）です。

このようにURIと特定実装は固定化されたものではなくアプリケーションのバインディングによって決定されます。

= リソースアダプター =

リソースアダプターは実際にはリソースオブジェクトのファクトリーです。`BEAR\Resource\Provider`メソッドを実装してリソースオブジェクトを返します。

例えば`app`, `page`なら`URI`からクラス名を特定してのリソースオブジェクトクラスをインスタンスにして返します。`http`なら`HTTP Clientサービス`を代理実行するオブジェクトです。

メソッドに対応する`onGet`等のメソッド名がリソースの状態を返します。


{{{
/**
 * App resource (app:://self/path/to/resource)
 *
 * @package BEAR.Resource
 *
 * @Scope("prototype")
 */
class App implements ResourceObject, Provider, Adapter
{
    /**
     * Application dependency injector
     *
     * @var Injector
     */
    private $injector;

    /**
     * Resource adapter namespace
     *
     * @var array
     */
    private $namespace;

    /**
     * Resource adapter path
     *
     * @var array
     */
    private $path;

    /**
     * Constructor
     *
     * @param InjectorInterface $injector  Application dependency injector
     * @param string            $namespace Resource adapter namespace
     * @param string            $path      Resource adapter path
     *
     * @Inject
     */
    public function __construct(
            InjectorInterface $injector,
            $namespace,
            $path
    ){
        if (! is_string($namespace)) {
            throw new RuntimeException('namespace not string');
        }
        $this->injector = $injector;
        $this->namespace = $namespace;
        $this->path = $path;
    }

    /**
     * (non-PHPdoc)
     *
     * @see    BEAR\Resource.Provider::get()
     * @return object
     * @throws Exception\Host
     */
    public function get($uri)
    {
        $parsedUrl = parse_url($uri);
        $path = str_replace('/', ' ', $parsedUrl['path']);
        $path = ucwords($path);
        $path = str_replace(' ', '\\', $path);
        $host = $parsedUrl['host'];
        $className = "{$this->namespace}\\{$this->path}{$path}";
        $instance = $this->injector->getInstance($className);

        return $instance;
    }
}
}}}

コンストラクタでリソースオブジェクトのベースディリクトリやインジェクターをインジェクトしてもらって、その依存解決を行いインスタンスにして返します。`app`も`page`も同じもので保存場所だけが違います。