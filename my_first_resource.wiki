#summary はじめてのリソース
= アプリケーションリソース =

ここれでは`name`を渡すと挨拶を返してくれる`greeting`リソースをつくってみます。
MVCでいうとモデルにあたる部分のアプリケーションリソース(appリソース)です。アプリケーションの内部APIとして利用されます。

== リソース設計 ==

リソースとは情報のかたまりです。ここでの情報は挨拶(`greeting`)です。この挨拶リソースも他のリソースと同様以下のものが必要です。

 * URI
 * リクエストインターフェイス 

ここではこういう風に決めました。

|| URI || メソッド || クエリー ||
|| app://self/first/greeting || get || ?name=名前 ||

期待するgreetingリソースはこういうものです。

リクエスト
{{{
get app://self/first/greeting?naem=BEAR
}}}
レスポンス
{{{
Hello, BEAR.
}}}

== リソースオブジェクト ==

sandboxアプリケーションに実装します。URIとPHPのクラス、ファイル位置はこのように対応します。

|| URI || Class || File ||
|| `app://self/first/greeting` || `sandbox\Resource\App\First\Greerting` || `apps/sandbox/Resource/App/First/Greeting.php` ||

リクエストインターフェイス（メソッド）を実装します。
{{{
namespace sandbox\Resource\App\First;

use BEAR\Resource\AbstractObject;

/**
 * Greeting resource
 */
class Greeting extends AbstractObject
{
    /**
     * Get
     *
     * @param  string $name
     * 
     * @return string
     *
     */
    public function onGet($name)
    {
        return "Hello, {$name}";
    }
}
}}}


== コマンドラインでためしてみましょう ==

ではコマンドラインインターフェイス(CLI)で試してみましょう。コンソールから入力します。まずは*失敗*から。

{{{
php api.php get app://self/first/greeting
}}}
400 Bad Requestのレスポンスが帰ってきます。
{{{
400 Bad Request
...
[BODY]
Internal error occured (e613b4)
}}}
ヘッダーをみると例外発生の情報があり、クエリーにnameが必要だというこ
とがわかります。

{{{
php api.php get app://self/first/greeting?name=BEAR
}}}
{{{
200 OK
cache-control: no-cache
date: Tue, 10 Jul 2012 23:55:16 GMT
content-type: text/html; charset=UTF-8
[BODY]
"Hello, BEAR"
}}}
今度は正しいレスポンスが返ってきました。成功です！

== リソースオブジェクトが返ります ==

 この挨拶リソース実装では文字列を返していますが、以下の記述のと同じものとして扱われます。どちらの記述でもリクエストしたクライアントのはリソースオブジェクトが返ります。

{{{
    public function onGet($name)
    {
        $this->body = "Hello, {$name}";
        return $this;
    }
}}}

`onGet`メソッド内をこのように変えてレスポンスが変わらない事を確認してみましょう。