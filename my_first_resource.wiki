= はじめてのリソース =

リソースを作成しCLIやWeb、APIとして利用してみます。

ここれでは`name`を渡すと挨拶を返してくれる`greeting`リソースをつくってみます。

== リソース設計 ==

リソースは情報のかたまりです。`greeting`リソースも他のリソースと同様以下のものが必要です。

 * URI
 * リクエストインターフェイス 

ここではこういう風に決めました。

|| URI || メソッド || クエリー ||
|| app://self/my/greeting || get || ?name=名前 ||

作成するgreetingリソースはこういうものです。

リクエスト
{{{
get app://self/my/greeting?BEAR
}}}
レスポンス
{{{
Hello, BEAR.
}}}

== リソースオブジェクト ==

sandboxアプリケーションに実装します。URIが`app://self/my/greeting`ならファイルは`apps/sandbox/Resource/App/My/Greeting.php`になります。

リクエストインターフェイス（メソッド）を実装します。
{{{
namespace sandbox\Resource\App\First;

use BEAR\Resource\AbstractObject;

/**
 * Greeting resource
 */
class Greetings extends AbstractObject
{
    /**
     * Get
     *
     * @param  string $name
     * 
     * @return string
     *
     */
    public function onGet($name)
    {
        return "Hello, {$name}";
    }
}
}}}

== コマンドライン ==

ではコマンドラインインターフェイス(CLI)で試してみましょう。コンソールから入力します。まずは*失敗*から。

{{{
php api.php get app://self/first/greeting
}}}
400 Bad Requestのレスポンスが帰ってきます。
{{{
400 Bad Request
...
[BODY]
Internal error occured (e613b4)
}}}
ヘッダーをみると例外発生の情報があり、クエリーにnameが必要だというこ
とがわかります。

{{{
php api.php get app://self/first/greeting?name=BEAR
}}}
{{{
200 OK
cache-control: no-cache
date: Tue, 10 Jul 2012 23:55:16 GMT
content-type: text/html; charset=UTF-8
[BODY]
"Hello, BEAR"
}}}
今度は正しいレスポンスが返ってきました。成功です！

== Webリソース ==
次はこのリソースをWeb APIとして利用します。built-in webサーバーを起動します。

{{{
$ php -S localhost:8099 api.php
}}}
 
ブラウザでアクセスします。
{{{
http://localhost:8089/first/greeting?name=BEAR
}}}

JSONで挨拶がかえってきたでしょうか？