#summary はじめてのDI

[my_first_resource はじめてのリソース]では挨拶は"Hello"と英語で固定されていました。DIを使ってマルチリンガル対応に変更します。

== 出来上がりイメージ ==
$nameの他に$lang(言語)を指定するとその言葉で挨拶が返ります。

== ディペンデンシー ==
[my_first_resource 挨拶リソース]では挨拶するための挨拶文字列（英語だと"Hello"）が必要です。これがこのリソースの依存（dependency)です。

大げさな言い方ですが、この依存に解決がこのリソースに必要です。３つの解決方法があります。

== 1.依存を内包する ==
=== dependency inside ===
依存をコード内に記述します。[my_first_resource はじめてのリソース]では"Hello"がメソッド内にハードコードされてました。これをクラスのconstにすればもう少しメンテナンス性が良くなるでしょう。しかし依存がコード内に存在してるという意味ではハードコードもconst利用も同じです。

== 2.依存を取得する ==
=== dependency pull  ===
依存を外部から取得します。例えばグローバル`define`を使えばメッセージ文字列の *設定* とその *利用* という関心は分離されよりメンテナンスのしやすいものになるでしょう。

実際にはグローバルスコープを嫌ったり設定保存の多様性を好んだりして利用のしやすさを向上するために特定のConfigクラスやレジストリを使うことの方が多いかもしれません。

どちらにしても外部から依存を取得することには代わりはありません。テストをするときにはクラスとその依存（設定ファイルやdefine）も変更する必要があります。

== 2.依存を注入する ==
=== dependency injection  (DI) ===
DIでは依存を外部から代入します。この外部からの代入を注入(Inject)といいます。


コンストラクターインジェクション ==
