#summary はじめてのアスペクト

== 挨拶に現在時間を追加する ==

挨拶リソースに現在時刻を追加します。出来上がりイメージはこうです。

{{{
"Hello, BEAR. It is 10:22."
}}}

このようにメッセージの後ろに時間を追加すれば簡単に実現できます。

{{{
    public function onGet($name = 'anonymous')
    {
        $time = date('g:i');
        return "{$this->message}, {$name}". " It is {$time} now";
    }
}}}

ではこの現在時刻の追加を他の10のリソースでも行いたいとしたらどうでしょう？「何かのメッセージの後に時間情報を追加」という処理を他の１０のリソースでも行います。同じ処理を何度もするので関数にしてみます。

{{{
    public function onGet($name = 'anonymous')
    {
        return "{$this->message}, {$name}". timeMessage();
    }
}}}

集約され、再利用性が高まりました。
あるいはtraitを使ってみましょうか。

{{{
    use TimeMessageTrait;

    public function onGet($name = 'anonymous')
    {
        return "{$this->message}, {$name}". $this->getTimeMessage();
    }
}}}

同じですね。

しかし集約することはできましたが利用メソッドの数だけ変更が必要です。

今度は時間ではなくて、挨拶の後は天気情報を付加するように変更がありました。`timeMessage`を`weatherMessage`に変えましょうか？

それとも、後ろにメッセージが付加される事を汎用的に`postMessage`としましょうか。...だんだん無理が出てきました。このようなメソッドを横断して同じ処理を適用する良い方法はないでしょうか。

== アスペクトにする ==

このようなメソッドを横断する処理はそもそもコーディングが難しい面があります。ログやキャッシュ、トランザクションなど何かの処理の前後に行うようなコードはあちこちに同じものがちらばったりした経験はないでしょうか？

begin, [query], (commit | rollback) という処理は[query]が変わるだけなのにいつも同じように全てを記述したりしなかったでしょうか。

ではこの横断的な処理を、元の本質的な処理と合成するようにしてみてはどうでしょうか。元のメッセージと付加するメッセージを動的に結合するのです。

この例では、「時刻情報を追加する」という処理をクラスをまたがって使われる（＝横断的な）処理とみなし、アスペクトと呼びます。このアスペクトと元の処理を合成するのがアスペクト指向プログラミングです。

== リフレクティブ・メソッドインボケーション・インターセプター ==

この横断的な処理と本質的な処理を合成するのにBEAR.Sundayではインターセプターというパターンを使います。

横断処理を元のメソッドの中で利用するのではなくて、横断処理が元のメソッドを呼ぶようにします。元のメソッドを横断処理が横取り（インターセプト）して横断処理から元のメソッドを呼びます。リフレクションを使ったメソッド実行（メソッドインボケーション）を利用してインターセプトします。

== インターセプターを作成します ==

ではコードを見てみましょう。
まずは元メソッドを横取りする横断処理、つまりインターセプターです。

まずは「何もしない」インターセプターです。

{{{
class TimeMessage implements MethodInterceptor
{
    /**
     * (non-PHPdoc)
     * @see Ray\Aop.MethodInterceptor::invoke()
     */
    public function invoke(MethodInvocation $invocation)
    {
        $result = $invocation->proceed();
        return $result;
    }
}
}}}

元のメソッドを実行（`$invocation->proceed()`）し、その結果を返しています。

`$invocation->proceed()`でオリジナルのメソッドを実行した後ろに時刻メッセージを追加します。
{{{
    public function invoke(MethodInvocation $invocation)
    {
        $time = date('g:i');
        $result = $invocation->proceed();
        return $result . " It is {$time} now";
    }
}}}

== このインターセプターを特定のメソッドにバインドする ==

これで横断処理から元メソッドの実行を実行するインターセプターができました。つぎに特定のメソッドとこのアスペクトを割当（バインド）します。

アノテーションを使う方法が一般的ですが、ここでは使わない最も簡単な方法で行ってみます。

`sandbox/Module/AppModule.php`の`configure`メソッドに追加します。

{{{
        // time message binding
        $this->bindInterceptor(
            $this->matcher->subclassesOf('sandbox\Resource\App\First\Greeting\Aop'),
            $this->matcher->any(),
            [new TimeMessage]
        );
}}}

これで`'sandbox\Resource\App\First\Greeting\Aop'`クラス（およびそのサブクラス）のどのメソッドにも`TimeMessage`インターセプターがバインドされます。

=== 実行してみましょう ===
{{{
get app://self/first/greeting/aop?name=BEAR
}}}
{{{
200 OK
...
[BODY]
"Hello, BEAR. It is 3:12 now !"
}}}

時刻伝えるアスペクトと挨拶リソースが合成されました！挨拶リソースは自分が加工編集されることに無関心です。

挨拶リソースには依存はなく、またtraitを使った横断処理の追加と違ってバインディングは動的です。このリソースに他のアスペクトをバインドできるし、このアスペクトは他のリソースにもバインド可能です。