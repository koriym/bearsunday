#summary blogチュートリアル(4) 閲覧ページの作成
#sidebar TableOfBlogTutorial

== ページの作成 ==

BEAR.Sundayで新しくページを作成する場合、通常次の２つを作成します。

 * ページリソースクラス
 * ページリソーステンプレート

ページリソースもappリソースと同じ構成、インターフェイスを持ちます。appリソースが標準の状態では何も持たず必要なDBオブジェクトをDIでインジェクトしたように、ページリソースもページ用の特別なオブジェクトはデフォルトでは何も持たず、依存をインジェクトして使用します。

== ページコントローラー ==

MVCのコントローラにあたる部分はBEARではページリソースです。ページはwebのリクエストを受け取り、アプリケーションリソースをリクエストして、自らを構成します。またページはそのまま出力用のオブジェクトとしても扱われます。

 Note: BEAR.Sundayではルーターも利用できますが、このブログアプリでは利用しません。

 Note: BEAR.Sundayではサイトの１ページが１ページリソースクラスに相当し：[http://capsctrl.que.jp/kdmsnr/wiki/PofEAA/?PageController ページコントローラー]の働きをします。

== ページクラス ==

ページもアプリケーションリソースと同じようにリソースの一つです。この記事表示ページの役割はアプリケーションAPIの記事リソースをGETしてページのpostsというスロットに格納することです。

[appリソース app_resource]のセクションではコンソールからappリソースリクエストを行いましたがPHPでリソースリクエストを行うにはリソースリクエストクライアントを使います。リソースリクエストクライントはtraitでインジェクトしてもらいます。

traitを使用するuse文でこのように記述するとリソースクライアントが$resourceプロパティにインジェクトされます。
{{{
    use ResourceInject;
}}}

インジェクトされたリソースクライアントを使ってリソースリクエストを行うにはこのようにします。
{{{
$this->resource->get->uri('app://self/posts')->request()
}}}

まとめるとこうなります。

{{{
<?php
namespace sandbox\Resource\Page\Blog;

use BEAR\Framework\Resource\AbstractPage as Page;
use BEAR\Framework\Inject\ResourceInject;
use BEAR\Framework\Annotation\Cache;

class Posts extends Page
{
    use ResourceInject;
	
    public $body = [
        'posts' => ''
    ];

    /**
     * Get
     *
     * @Cache
     */
    public function onGet()
    {
        $this['posts'] = $this->resource->get->uri('app://self/posts')->request();
        return $this;
    }
}

}}}
`app://self/posts`リソースへのリクエストを自らのpostsというスロットに格納しています。

    Note: $this['posts'] は $this->body['body']の省略した書き方のシンタックスシュガー(=読み書きのしやすさのために導入される構文)です。

== リソースとしてのページ ==

MVCのコントローラーと違って、ページリソースの中で出力用のテンプレートや出力用オブジェクト等に関心が払われてないのに注目してみてください。

それではページリソースをアプリケーションリソースと同じようにコンソールでアクセスしてみましょう。

{{{
$ php api.php get page://self/blog/posts

200 OK
[BODY]
posts:*get app://self/posts*
}}}
（実際には太字ではなくアンダーラインです)

postsというスロットに*get app://self/posts* というリクエストが格納されていることを表しています。

リクエストではなくリクエスト結果で確認するときにはviewオプションを付けます。

$ php api.php get page://self/blog/posts view

{{{
200 OK
[BODY]
posts:    <!-- set up the modal to start hidden and fade in and out -->

<table class="table table-bordered table-striped">
    <tr>
        <th class="span1">Id</th>
        <th>Title</th>
        <th>Body</th>
        <th>CreatedAt</th>
        <th></th>
    </tr>
        <tr>
        <td>0</td>
        <td><a href="posts/post?id=0">Alan Kay 1</a></td>
        <td>People who are really serious about software should make...</td>
        <td>2011-05-07 16:13:11</td>
        <td>
       ...
</table>     *get app://self/posts*
}}}

リソースリクエストが実行されその結果がpostsスロットに格納されているのがわかります。

ページリソースはMVCのコントローラーの役割をするとともに出力用のオブジェクトの役割も果たしています。しかしどのように表現されるかにはまだ関心が払われていません。