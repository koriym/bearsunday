#summary blogチュートリアル(4) 閲覧ページの作成
#sidebar TableOfBlogTutorial

== ページの作成 ==

BEAR.Sundayで新しくページを作成する場合、通常次の２つを作成します。

 * ページリソースクラス
 * ページリソーステンプレート

== ページコントローラー ==

BEAR.Sundayではオプションでルーターが利用できますが、このブログアプリでは利用しません。ページもアプリケーションリソースと同じようにページリソースとして扱います。

Note:
   BEAR.Sundayではサイトの１ページが１ページリソースクラスに相当し：[http://capsctrl.que.jp/kdmsnr/wiki/PofEAA/?PageController ページコントローラー]の働きをします。

== ページクラス ==

MVCのコントローラにあたる部分はBEARではページリソースです。アプリケーションリソースにリクエストを行い、そのアプリケーションリソースを使って自らのページリソースを構成します。

{{{
<?php
namespace sandbox\Resource\Page;

use BEAR\Resource\AbstractObject as Page;
use BEAR\Resource\Client as Resource;

class Posts extends Page
{
    private $resource;

    /**
     * @Inject
     */
    public function __construct(Resource $resource)
    {
        $this->resource = $resource;
    }

    /**
     * Get
     * 
     * @return array
     */
    public function onGet()
    {
        $this['posts'] = $this->resource->get->uri('app://self/posts')->request();
        return $this;
    }
}
}}}

 # コンストラクタでインジェクトされたリソースクライアントを使っています。
 # `app://self/posts`リソースへのリクエストを自らのpostsというスロットに格納しています。

    Note: $this['posts'] は $this->body['body']の省略した書き方のシンタックスシュガー(=読み書きのしやすさのために導入される構文)です。

    Note: MVCのコントローラーと違って、ページリソースの中で出力用のテンプレートや_出力用オブジェクト等に関心が払われてないのに注意してください。

    Note: ページリソースはMVCのコントローラーの役割をするとともに、抽象化された出力用のオブジェクトの役割も果たしています。