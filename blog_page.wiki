#summary blogチュートリアル(4) 閲覧ページの作成
#sidebar TableOfBlogTutorial

== ページの作成 ==

BEAR.Sundayで新しくページを作成する場合、通常次の２つを作成します。

 * ページリソースクラス
 * ページリソーステンプレート

ページリソースもappリソースと同じ構成、インターフェイスを持ちます。appリソースが標準の状態では何も持たず必要なDBオブジェクトをDIでインジェクトしたように、ページリソースもページ用の特別なオブジェクトはデフォルトでは何も持たず、依存をインジェクトして使用します。

== ページコントローラー ==

MVCのコントローラにあたる部分はBEARではページリソースです。ページはwebのリクエストを受け取り、アプリケーションリソースをリクエストして、自らを構成します。またページはそのまま出力用のオブジェクトになります。

 Note: BEAR.Sundayではルーターも利用できますが、このブログアプリでは利用しません。

 Note: BEAR.Sundayではサイトの１ページが１ページリソースクラスに相当し：[http://capsctrl.que.jp/kdmsnr/wiki/PofEAA/?PageController ページコントローラー]の働きをします。

== ページクラス ==

ページもアプリケーションリソースと同じようにリソースの一つです。

{{{
<?php
class Posts extends Page
{
    use View;

    private $resource;

    /**
     * @Inject
     */
    public function __construct(Resource $resource)
    {
        $this->resource = $resource;
    }

    /**
     * Get
     *
     * @return self
     */
    public function onGet()
    {
        $this['posts'] = $this->resource->get->uri('app://self/posts')->linkSelf('view')->request();
        return $this;
    }
}
}}}

 # コンストラクタでインジェクトされたリソースクライアントを使っています。
 # `app://self/posts`リソースへのリクエストを自らのpostsというスロットに格納しています。

    Note: $this['posts'] は $this->body['body']の省略した書き方のシンタックスシュガー(=読み書きのしやすさのために導入される構文)です。

== リソースとしてのページ ==

MVCのコントローラーと違って、ページリソースの中で出力用のテンプレートや出力用オブジェクト等に関心が払われてないのに注目してみてください。

それではページリソースをアプリケーションリソースと同じようにCLIで利用してみましょう。

{{{
$ blog get page://self/posts

200 OK
[BODY]
array (
  'posts' => 
  array (
    0 => 
    array (
      'id' => '1',
      'title' => 'タイトル',
      'body' => 'これは、記事の本文です。',
      'created' => '2011-07-01 16:02:59',
      'modified' => NULL,
    ),
}}}

ページリソースはMVCのコントローラーの役割をするとともに、抽象化された出力用のオブジェクトの役割も果たしています。しかしどのように表現されるかにはまだ関心が払われていません。