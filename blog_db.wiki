#summary blogチュートリアル(2) データベースの設定
#sidebar TableOfBlogTutorial

== MySQLにblogbearデータベースを作成¶ ==

次に、ブログで使用するデータベースをセットアップしましょう。今は、投稿記事を保存するためのテーブルをひとつ作成します。テスト用にいくつかの記事も入れておきましょう。次のSQLをデータベースで実行してください。

== blogbearデーターベースを作成 ==
{{{
CREATE DATABASE `blogbear` DEFAULT CHARACTER SET 'utf8';
}}}
== postsテーブルを作成 ==
{{{
CREATE TABLE posts (
id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
title VARCHAR(50),
body TEXT,
created DATETIME DEFAULT NULL,
modified DATETIME DEFAULT NULL
);
/* それから、テスト用に記事をいくつか入れておきます。 */
INSERT INTO posts (title,body,created)
VALUES ('タイトル', 'これは、記事の本文です。', NOW());
INSERT INTO posts (title,body,created)
VALUES ('またタイトル', 'そこに本文が続きます。', NOW());
INSERT INTO posts (title,body,created)
VALUES ('タイトルの逆襲', 'こりゃ本当に面白そう！うそ。', NOW());
}}}

==データベースの利用の準備 ==

アプリケーションモジュールの`configure`メソッドの中で以下のようにコーディングして、Doctrine DBALを利用可能にするモジュールをインストールします。コンストラクタにはマスター用DBとスレーブ用DBの接続先情報を渡します。１つしか用いない場合は同じで構いません。

_`sandbox/Modules/AppModule.php`_
{{{
// indtall runmode module
$masterDb = $slaveDb = [
    'driver' => 'pdo_mysql',
    'host' => 'localhost',
    'dbname' => 'blogbear',
    'user' => 'root',
    'password' => null,
    'charset' => 'UTF8'
];
$this->install(new Database\DoctrineDbalModule($masterDb, $slaveDb));
}}}

このモジュールをインストールで`@Dbアノテーション`を持つクラスのメソッドが実行される直前に、そのクラスの`db`プロパティにDoctrine.DBAL db接続オブジェクトが代入されるようになります。

    Note: 上記のDBモジュール内部では@Dbアノテーションを持つ特定のメソッドに`db`プロパティをセットする[http://code.google.com/p/rayphp/wiki/AOP インターセプター] をバインドしています。インターセプターは本来呼ばれるメソッドに変わって特定の処理を本来のメソッドの前後に行います。インターセプターは問題をオブジェクトではなく、アスペクトに分割するためこれを[http://e-words.jp/w/E382A2E382B9E3839AE382AFE38388E68C87E59091E38397E383ADE382B0E383A9E3839FE383B3E382B0.html アスペクト指向プログラミング(AOP)]と呼びます。


== テーブルスキーマの設定 ==

今回の例ではORMを使用していないのでありません。