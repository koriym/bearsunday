#summary blogチュートリアル(2) データベースの設定
#sidebar TableOfBlogTutorial

== MySQLにblogbearデータベースを作成¶ ==

次に、ブログで使用するデータベースをセットアップしましょう。今は、投稿記事を保存するためのテーブルをひとつ作成します。テスト用にいくつかの記事も入れておきましょう。次のSQLをデータベースで実行してください。

== blogbearデーターベースを作成 ==
{{{
CREATE DATABASE `blogbear` DEFAULT CHARACTER SET 'utf8';
}}}
ソッドをに 
== postsテーブルを作成 ==
{{{
CREATE TABLE posts (
id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
title VARCHAR(50),
body TEXT,
created DATETIME DEFAULT NULL,
modified DATETIME DEFAULT NULL
);
/* それから、テスト用に記事をいくつか入れておきます。 */
INSERT INTO posts (title,body,created)
VALUES ('タイトル', 'これは、記事の本文です。', NOW());
INSERT INTO posts (title,body,created)
VALUES ('またタイトル', 'そこに本文が続きます。', NOW());
INSERT INTO posts (title,body,created)
VALUES ('タイトルの逆襲', 'こりゃ本当に面白そう！うそ。', NOW());
}}}

==データベースの利用の準備 ==

現在のBEAR.Sundayに既定のデータベースはなく、設定ファイルも必須ではありません。

アプリケーションリソースがデータベースを利用できるようにする方法はいくつかありますが、ここでは@Dbアノテーションを利用した方法で行います。

まずアプリケーションモジュールの`configure`メソッドの中で以下のようにコーディングしてデータベースを利用するクラスにDBオブジェクトを渡せるように設定をします。

{{{
$masderDb = $slaveDb = [
    'driver' => 'pdo_mysql',
    'host' => 'localhost',
    'dbname' => 'blogbear',
    'user' => 'root',
    'password' => null,
    'charset' => 'UTF8'
];
$dbInjector = new DbInjector($masderDb, $slaveDb);
$this->bindInterceptor(
    $this->matcher->annotatedWith('BEAR\Framework\Annotation\Db'),
    $this->matcher->any(),
    [$dbInjector]
);
}}}

この設定で`@Dbアノテーション`を持つクラスのメソッドが実行される直前に、そのクラスのDBプロパティにDBオブジェクトが代入されるようになります。

    Note: 上記の設定は特定のメソッドに [http://code.google.com/p/rayphp/wiki/AOP インターセプター] をバインドしています。インターセプターは本来呼ばれるメソッドに変わって特定の処理を本来のメソッドの前後に行います。インターセプターは問題をオブジェクトではなく、アスペクトに分割するためこれを[http://e-words.jp/w/E382A2E382B9E3839AE382AFE38388E68C87E59091E38397E383ADE382B0E383A9E3839FE383B3E382B0.html アスペクト指向プログラミング(AOP)]と呼びます。

一旦この設定が行われると、以下のようにクラスに*@Db* とアノテートされてる全てのクラスでセッター経由でDBオブジェクトがセットされます。またDBオブジェクトもリクエストメソッドに応じてmaster/slaveが区別されます。

{{{
/**
 * @Db
 */
class Posts
{
    /**
     * DB
     *
     * @var Connection
     */
    private $db;

    /**
     * Set DB
     *
     * @param Connection $db
     *
     * @return void
     */
    public function setDb(Connection $db)
    {
        $this->db = $db;
    }
}}}

このようにBEAR.Sundayでは原則としてアプリケーションは自ら外部インスタンスの取得を行いません。new キーワードを用いたインスタンス生成や、ファクトリー、サービスコンテナからの取得など、メソッド内から外部に対してインスタンス取得の直接要求を行いません。代わりに外部から代入される事を期待します。

この時、外部からのインスタンスを依存（Dependency)または依存オブジェクト、その代入を注入（インジェクション）、また提供されるインスタンスのうち主に機能を提供するものをサービス（オブジェクト）と呼びます。依存性の注入（Dependency Injection = DI)パターンと呼ばれるデザインパターンです。

もし依存性の注入やアスペクト指向プログラミングに馴染みがなくともここで理解する必要はありません。とりあえあずここでは「@DbとアノテートされたクラスにDBオブジェクトが渡される仕組みの設定を行った」と理解していれば充分です。

== テーブルスキーマの設定 ==

今回の例ではORMを使用していないのでありません。