#summary blogチュートリアル(2) データベースの設定
#sidebar TableOfBlogTutorial

== MySQLにblogbearデータベースを作成¶ ==

次に、ブログで使用するデータベースをセットアップしましょう。今は、投稿記事を保存するためのテーブルをひとつ作成します。テスト用にいくつかの記事も入れておきましょう。次のSQLをデータベースで実行してください。

== blogbearデーターベースを作成 ==
{{{
CREATE DATABASE `blogbear` DEFAULT CHARACTER SET 'utf8';
}}}

== postsテーブルを作成 ==
{{{
CREATE TABLE posts (
id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
title VARCHAR(50),
body TEXT,
created DATETIME DEFAULT NULL,
modified DATETIME DEFAULT NULL
);
/* それから、テスト用に記事をいくつか入れておきます。 */
INSERT INTO posts (title,body,created)
VALUES ('タイトル', 'これは、記事の本文です。', NOW());
INSERT INTO posts (title,body,created)
VALUES ('またタイトル', 'そこに本文が続きます。', NOW());
INSERT INTO posts (title,body,created)
VALUES ('タイトルの逆襲', 'こりゃ本当に面白そう！うそ。', NOW());
}}}

== データベース接続設定 ==

現在のBEAR.Sundayにいわゆる設定ファイルはありません。代わりにデータベースオブジェクトを利用するクラスにオブジェクトを渡すための*バインディング*をアプリケーションモジュールの中でコーディングします。

{{{
$this->bind('Doctrine\DBAL\Connection')->toProvider('\sandbox\Module\Provider\DbalProvider')->in(Scope::SINGLETON);;
}}}

`Doctrine\DBAL\Connection`インターフェイスと`\sandbox\Module\Provider\DbalProvider`プロバイダークラスで生成されるインスタンスを*バインド*しています。

このコードは以下のような@Injectとアノテートされたメソッドに必要なDBオブジェクトが渡されます。(`Doctrine\DBAL\Connection`インターフェイスのタイプヒントをもつ`$connection`に'\sandbox\Module\Provider\DbalProvider'で生成されたDBコネクションが渡されます。)

{{{
/**
 * @Inject
 */
public function __construct(Connection $connection)
}}}

コンストラクタでなく通常のメソッドにも@Injectとアノテートできます。

{{{
/**
 * @Inject
 */
public function setDb(Connection $connection)
}}}

    Note: メソッド名は何でも構いません。＠Injectとアノテートされたメソッドに必要なオブジェクトが代入されます。

このようにBEAR.Sundayでは必要なインスタンスは基本的にすべて外部からインジェクトされます。

通常、アプリケーションは自らインスタンス生成をしません。new キーワードを用いたインスタンスを生成や、ファクトリーの直接利用、サービスコンテナからオブジェクトの取得など、メソッド内でのインスタンス取得の直接要求を行わないということです。

依存性の解決 (Dependency resolution)を行う`インジェクター`がアプリケーションに変わって必要インスタンスを生成・取得し、そのインスタンスを外部から代入します。

この外部からの代入を注入（インジェクション）、また提供されるインスタンスのうち主に機能を提供するものをサービス（オブジェクト）と呼びます。依存性の注入（Dependency Injection = DI)パターンと呼ばれるデザインパターンです。


== テーブルスキーマの設定 ==

ORMを使用していないのでありません。