#summary インストール

= 導入 =

現在のバージョンではBEAR.Sunday本体のインストールはgitで行い、BEAR.Sundayの依存ライブラリをcomposerを使って取得します。

== 必要要件 ==
 * PHP 5.4
 * APC

 APCはPHP5.4対応の3.1.10以降を[http://jp.php.net/manual/ja/apc.setup.php インストール]します。

== オプション ==
 * [http://jp.php.net/manual/en/book.xhprof.php xhprof]

=== php.ini ===
{{{
apc.enable_cli = 1
xhprof.output_dir = /tmp
}}}


= インストール =

{{{
$ git clone git://github.com/koriym/BEAR.Sunday.git
}}}
または https://github.com/koriym/BEAR.Sunday/downloads からダウンロード
{{{
$ cd BEAR.Sunday
$ curl -s http://getcomposer.org/installer | php
$ php composer.phar install
$ chmod -R 777 apps/sandbox/tmp apps/sandbox/log
}}}

= テスト =
== テスト環境==

{{{
$ pear config-set auto_discover 1
$ pear install pear.phpunit.de/PHPUnit
$ pear install phpunit/DbUnit
$ pear install phpunit/PHP_Invoker
}}}
 Note: 環境によっては、root として実行しなければならないかもしれません。

=== DBの準備 ===
テストを実行するためにsandboxアプリで利用するDBとテスト用のDBを作成します。

== blogbearデーターベースを作成 ==
{{{
CREATE DATABASE `blogbear` DEFAULT CHARACTER SET 'utf8';
}}}

== postsテーブルを作成 ==
{{{
CREATE TABLE posts (
id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
title VARCHAR(50),
body TEXT,
created DATETIME DEFAULT NULL,
modified DATETIME DEFAULT NULL
);
/* それから、テスト用に記事をいくつか入れておきます。 */
INSERT INTO posts (title,body,created)
VALUES ('タイトル', 'これは、記事の本文です。', NOW());
INSERT INTO posts (title,body,created)
VALUES ('またタイトル', 'そこに本文が続きます。', NOW());
INSERT INTO posts (title,body,created)
VALUES ('タイトルの逆襲', 'こりゃ本当に面白そう！うそ。', NOW());
}}}

== ユニットテスト用データベースの準備 ==
こちらはテスト毎にセット/破棄されるのでコンテンツを用意しておく必要はありません。

{{{
CREATE DATABASE `blogbeartest` DEFAULT CHARACTER SET 'utf8';
}}}
{{{
CREATE TABLE posts (
id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
title VARCHAR(50),
body TEXT,
created DATETIME DEFAULT NULL,
modified DATETIME DEFAULT NULL
);
}}}

== MySQLのID/パスワード ==

|| ホスト || ID || パスワード ||
|| localhost || root || '' ||

DB接続は以上の設定になっています。そのうち`ID`, `パスワード`は環境変数としてセットすることで変更が可能です。

 Note:php.iniで`$_ENV`を利用可能にするための設定が必要です

例) "root" / "password" を環境変数として~/.bashrcでエクスポート

~/.bashrc 追記

{{{
export BEAR_DB_ID=root
export BEAR_DB_PASSWORD=password
}}}

~/.bashrcでエクスポート
{{{
. ~/.bashrc
}}}

これで設定したID/パスワードでDB接続するようになります。

== テスト実行 ==
$ phpunit

= sandboxアプリケーション実行 =

BEAR.SundayのアプリケーションはWeb、CLI双方からアクセスできます。

== ビルトインウェブサーバー ==

開発用途にはPHP5.4の[http://jp.php.net/manual/ja/features.commandline.webserver.php ビルトインウェブサーバー]を利用できます。

{{{
$ cd apps/sandbox/htdocs/
$ /path/to/php54/php -S localhost:8088 web.php
}}}

 * ブラウザで http://localhost:8088 を開きます。
 * ポート番号は任意です。

== CLIインターフェイス ==

 * BEAR.Sundayアプリのページはwebクライアントからだけでなく、コンソールからも取得できます。

 * pageリソースやappリソース（コントローラーやモデル）もプログラム内からだけでなくコマンドラインからもアクセスできます。

=== ウエブページ===
{{{
$ php web.php get /index
}}}

=== appリソース ===
{{{
$ php api.php get app://self/greetings?lang=ja
$ php api.php get app://self/greetings?lang=en
}}}

=== pageリソース ===
{{{
$ php api.php get page://self/index
$ php api.php get page://self/index rep
}}}


= トラブルシューティング =

 * `PHP Fatal error:  Uncaught exception 'Zend\Cache\Exception\ExtensionNotLoadedException' with message 'ext/apc is disabled - see 'apc.enabled' and 'apc.enable_cli''`

APCをオンにします。

 * `PDOException: SQLSTATE[HY000] [2002] No such file or directory`

ソケットファイルの場所が正しく指定されていません。`mysqladmin version`(OSXなら`mysqladmin5 version`）で表示されるソケットファイルの場所をPHPのiniファイルで指定します。

{{{
$ mysqladmin version

UNIX socket		/opt/local/var/run/mysql5/mysqld.sock
}}}

※/opt/local/var/run/mysql5/mysqld.sockはmacportsでmysqlをインストールしている場合です。

{{{
pdo_mysql.default_socket= /opt/local/var/run/mysql5/mysqld.sock
mysql.default_socket = /opt/local/var/run/mysql5/mysqld.sock
mysqli.default_socket = /opt/local/var/run/mysql5/mysqld.sock
}}}