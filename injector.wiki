#summary インジェクター
= 導入 =

BEAR.Sundaのオブジェクトは必要とするオブジェクト（依存、dependency）を外部から取得したりnewやfactoryメソッドなどで自ら作成することなく、外部から代入されることを期待します。 

依存を必要とするオブジェクトに対して、インジェクターは*モジュール* に基づき外部からの代入（注入、インジェクション）を行います。モジュールはオブジェクトの構成知識を持っていて、どのような依存オブジェクトのリクエストがあれば、どうやってそれを満たすかという知識を持っています。

BEAR.SundayのDI([http://code.google.com/p/rayphp/wiki/Motivation?tm=6 Ray.Di])ではオブジェクトを提供する側と利用する側にはっきり区別があり、コンシュマー（依存を利用する側）は利用オブジェクトを、そのクラス内で生成したり取得したりしない事が推奨されます。（サービスコンテナやインジェクターを使う事も推奨されません）

== インジェクターの生成 ==

インジェクターはモジュールを使って以下の様に生成します。

{{{
$injector = Inject::create([new OneModule]);
}}}

モジュールは複数設定することができます。

{{{
$injector = Inject::create([new OneModule, new TwoModule, ...]);
}}}

※モジュールは原則的はそれぞれ独立しています。`OneModule`でバインドした内容は`TwoModule`内では適用されません。

通常インジェクターはアプリケーションboot時にだけ作成され使われます。

== モジュール ==

モジュールは*@Inject* アノテーションでアノテートされた依存の要求に対するインスタンスまたはインスタンスの取得方法をバインドしインジェクションの設定を行います。

モジュールは`AbstractModule`を継承し、`configure`メソッド内のバンディングDSLで、依存を必要とする場所（インジェクションポイント）と依存（または依存の提供方法）をバインドします。 

例）`CreditCardProcessor`インターフェイスに`CheckoutCreditCardProcessor`クラスをバインドしています。

{{{
class AppModule extends AbstractModule
{
    /**
     * Configure dependency binding
     *
     * @return void
     */
    protected function configure()
    {
        $this->bind('CreditCardProcessor')
        ->to('CheckoutCreditCardProcessor');
    }
}}}

== モジュール内での依存 ==

モジュールの`configure`メソッド内で依存を得るためにDIが必要な事があります。そのときには*requestInjection* メソッドを使ってインジェクションすることができます。

{{{
$this->bind('age')->toInstance('25');
$user = $this->requireInjection('User');
}}}
`User`クラスのインスタンスがつくられ、`@Named("age")`というインジェクションポイントに25がインジェクトされます


== モジュールのインストール ==

他のモジュールをインストールすると設定が合成され使われます。関心ごとにモジュールをまとめ分かりやすい名前をつけると再利用性が高まります。
{{{
$this->install(new MySqlModule);
}}}

`$this'をコンストラクタに渡すと自己でバインドした設定が引き継がれます

{{{
$this->bind()->('socket_path')->toInstance('/tmp/mysql.sock');
$this->install(new MySqlModule($this);
}}}
※モジュール内では`@Inject @Named('socket_path')`とあのテートすると`/tmp/mysql.sock`がインジェクトされます。


== モジュールの合成 ==
sandboxアプリケーションでは３つのもジュールが用意され、それらは合成され１つのアプリケーションの設定を行っています。

==== フレームワークモジュール(`FrameworkModule`) ====
フレームワークそのもの設定です。このモジュールを自作のものに入れ替える、またはこのモジュールをインストールするまえに`bind`するとフレームワークで使われているクラスを入れ替える事ができます。

==== モードモジュール(`DevModule`, `ProdModule`,...) ====
実行モードに応じたアプリケーション設定です。sandboxアプリケーションではPROD（プロダクション）、DEV（開発）、STAB（スタブデータ）のモードが用意されています。

==== アプリケーションモジュール(`AppModule`) ====
実行モードによらないアプリケーション設定です。

もジュール数は３つに限定されていません。例えばチーム共通のモジュール、同型等サービスの共通もジュール、自作ユーティリティのモジュールなど関心に応じてもジュールを作成して合成利用することができます。