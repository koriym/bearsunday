#summary インジェクター
= 導入 =

BEAR.Sundaでのオブジェクトは必要とするオブジェクト（依存）を外部から取得することはなく、が外部から代入されることを原則的に期待します。 

インジェクターは_モジュール_に基づき外部からの代入（インジェクション）を行います。BEAR.SundayのDI、Ray.Diではオブジェクトを提供する側と利用する側にはっきり区別があり、依存を利用する側（コンシュマー）は オブジェクトを、そのクラス内で生成したり取得したりしない事が推奨されます。（取得にはサービスコンテナやインジェクターを使う事も含みます）

== インジェクターの生成 ==

インジェクターはモジュールを使って以下の様に生成します。

{{{
$injector = Inject::create([new OneModule]);
}}}

モジュールは複数設定することができます。

{{{
$injector = Inject::create([new OneModule, new TwoModule, ...]);
}}}

※モジュールは原則的はそれぞれ独立しています。`OneModule`でバインドした内容は`TwoModule`内では適用されません。

通常インジェクターはアプリケーションboot時にだけ作成され使われます。

== モジュール ==

モジュールはそのインジェクション（外部からの代入）のためインスタンス（実装）をインジェクトするかという設定と、AOPプログラミングのインターセプターのバインディングを行います。

モジュールはAbstractModuleを継承し、configureメソッド内のバンディングDSLで、依存を必要とする場所（インジェクションポイント）と依存（または依存の提供方法）をバインドします。 

例）`CreditCardProcessor`インターフェイスに`CheckoutCreditCardProcessor`クラスをバインドしています。

{{{
class AppModule extends AbstractModule
{
    /**
     * Configure dependency binding
     *
     * @return void
     */
    protected function configure()
    {
        $this->bind('CreditCardProcessor')
        ->to('CheckoutCreditCardProcessor');
    }
}}}