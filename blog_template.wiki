#summary blogチュートリアル(5) テンプレートの作成
#sidebar TableOfBlogTutorial

blogチュートリアル(4) テンプレートの作成

== リソース状態を表現するリソースレンダラー ==

前回までのステップで記事リソースには記事情報が、ページリソースには記事リソースへのリクエストがセットされました。これらの*リソース状態* を *表現* にするためにHTMLレンダリングします。

リソースはそれぞれが内部にレンダラーを持っています。sandboxアプリケーションでは、HTML出力するためのテンプレートエンジン(Smarty3)が全てのリソースにインジェクトされています。

  Note: 一般的MVCではコントローラがモデルのデータをビューに渡し出力用文字列を得ますが、BEAR.Sundayでは全てのモデルがそれぞれビューを内包してるようなイメージです。モデルの出力の責任はコントローラーではなくモデルが持ちます。

== 記事リソーステンプレート ==
_sandbox/Resource/App/Posts.tpl_
{{{
<table class="table table-bordered table-striped">
    <tr>
        <th class="span1">Id</th>
        <th>Title</th>
        <th>Body</th>
        <th>CreatedAt</th>
    </tr>
    {foreach from=$resource->body item=post}
    <tr>
        <td>{$post.id}</td>
        <td><a href="posts/post?id={$post.id}">{$post.title}</a></td>
        <td>{$post.body|truncate:60}</td>
        <td>{$post.created}</td>
    </tr>
    {/foreach}    
</table>    
}}}
記事リソース($posts)のコンテンツ(bodyプロパティ)を展開しています。

== 記事表示ページテンプレート ==
_sandbox/Resource/Resource/Posts.tpl_

{{{
<html>
    <body>
    <h1>Posts</h1>
    {$posts}
    </body>
</html>
}}}

postsリソースが持つ情報の詳細はページテンプレートでは表されてないことに注目してください。postsリソースのプレースフォルダだけがあり、記事が"title"や"body"等どういうプロパティを持つかにページはページリソースもページテンプレートも関心を持っていません。記事リソースの構成（要素）が変わっても、それを利用するページリソースには変更がありません。

postsリソースをどう表現するかは、postsリソース自身が持つテンプレートで構成されます。リソースはそれぞれの表現を自らの責任とすることができます。

 Note: オブジェクトへの責任割り当てにおける一般原則で責任の遂行に必要な情報を持っているクラス、「情報エキスパート」に責任を割り当てる [http://ja.wikipedia.org/wiki/GRASP#.E6.83.85.E5.A0.B1.E3.82.A8.E3.82.AD.E3.82.B9.E3.83.91.E3.83.BC.E3.83.88 情報エキスパート（Information Expert）パターン] の原則に従っています。この場合記事リソースだけが記事テンプレートに関わりがあり、記事表示ページは記事リソーステンプレートや記事リソースの構成に対して無関心です。

== リソース表現 = リソース状態＋リソーステンプレート ==

これまで見てきたようにリソース状態はリソーステンプレートと合成されレンダリングされた結果がリソース表現としてクライアントに伝えられます。

コマンドラインで確認してみましょう。前回のapiリクエストにviewオプションを付けるとリクエストではなく*リクエスト結果* で確認することができます。。

$ php api.php get page://self/blog/posts view

{{{
200 OK
[BODY]
posts:    <!-- set up the modal to start hidden and fade in and out -->

<table class="table table-bordered table-striped">
    <tr>
        <th class="span1">Id</th>
        <th>Title</th>
        <th>Body</th>
        <th>CreatedAt</th>
        <th></th>
    </tr>
        <tr>
        <td>0</td>
        <td><a href="posts/post?id=0">Alan Kay 1</a></td>
        <td>People who are really serious about software should make...</td>
        <td>2011-05-07 16:13:11</td>
        <td>
       ...
</table>     *get app://self/posts*
}}}

記事リソースへのリクエストが行われリソースリクエスト結果がpostsスロットに格納されています。

== レイジーリクエスト ==

ページリソース内ではpostsリソースへのリクエストが{$posts}にセットされていました。このリクエストはテンプレート内に{$posts}プレースフォルダが出現した時点でリクエストされます。

つまり出現しなければこのリクエストは実行されず、リクエストを行うかどうかはテンプレート側で決定されます。

== リソースオブジェクト ==

セットされたリソースは表現として扱うだけでなくその要素を直接とりだすこともできます。

{{{
{$posts.0.title}
}}}

メソッドやプロパティを指定してオブジェクトしても扱えます。

{{{
{$posts->owner}
{$posts->isPublic()}
}}}

テンプレートにアサインされたリソースはその扱い方で振る舞いが変わります。コントローラーであるページがアクセスが必要かどうか、どのようにアサインするかを決めるのではなく、*ビュー側がコンテキストに応じて後から決定します*。これはBEAR.Sundayのビューの特徴の一つです。