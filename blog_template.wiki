#summary blogチュートリアル(5) テンプレートの作成
#sidebar TableOfBlogTutorial

blogチュートリアル(4) テンプレートの作成

== リソース状態を表現するリソースレンダラー ==

前回までのステップで記事リソースには記事情報が、ページリソースには記事リソースへのリクエストがセットされました。これらの*リソース状態* を *表現* にするためにHTMLレンダリングします。

リソースはそれぞれが内部にレンダラーを持っています。sandboxアプリケーションでは、HTML出力するためのテンプレートエンジン(Smarty3)が全てのリソースにインジェクトされています。

  Note: 一般的MVCではCがMをVに渡して出力用文字列を得ますが、BEAR.Sundayでは全てのMがそれぞれVを内包してるようなイメージです。

== appリソース用テンプレート ==
_sandbox/Resource/App/Posts.tpl_
{{{
<table class="table table-bordered table-striped">
    <tr>
        <th class="span1">Id</th>
        <th>Title</th>
        <th>Body</th>
        <th>CreatedAt</th>
    </tr>
    {foreach from=$resource->body item=post}
    <tr>
        <td>{$post.id}</td>
        <td><a href="posts/post?id={$post.id}">{$post.title}</a></td>
        <td>{$post.body|truncate:60}</td>
        <td>{$post.created}</td>
    </tr>
    {/foreach}    
</table>    
}}}
記事リソース($posts)のコンテンツ(bodyプロパティ)を展開しています。

== ページ用テンプレート ==
_sandbox/Resource/Resource/Posts.tpl_

{{{
<html>
    <body>
    <h1>Posts</h1>
    {$posts}
    </body>
</html>
}}}

postsリソースが持つ情報の詳細はページテンプレートでは表されてないことに注目してください。postsリソースのプレースフォルダだけがあり、記事が"title"や"body"というプロパティを持つかにページはページリソースもページテンプレートも関心を持っていません。記事リソースの詳細が変わっても、それを利用するページリソースには変更がありません。

postsリソースをどう表現するかは、postsリソース自身が持つテンプレートで構成されます。

== レイジーリクエスト ==

ページリソース内ではpostsリソースへのリクエストが{$posts}にセットされていました。このリクエストはテンプレート内に{$posts}プレースフォルダが出現した時点でリクエストされます。

つまり出現しなければこのリクエストは実行されず、リクエストを行うかどうかはテンプレート側で決定されます。

== リソースオブジェクト ==

セットされたリソースは表現として使うだけでなく、その要素を直接とりだすこともできます。

{{{
{$posts.0.title}
}}}

メソッドやプロパティを指定してオブジェクトしても扱えます。

{{{
{$posts->owner}
{$posts->isPublic()}
}}}